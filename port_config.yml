---
- name: TSDM Implementation Playbook
  hosts: localhost
  gather_facts: no
  vars:
    vcenter_hostname: "vcenter01.anpslab.com"
    vcenter_username: "administrator@vsphere.local"
    vcenter_password: "HPEinvent23!"
    datacenter_name: "datacenter-01"
    esxi_hosts:
      # - { hostname: "192.168.243.48", vmkernel_ip: "192.168.243.119", subnet: "255.255.255.0", gateway: "192.168.243.1", username: "root", password: "P@ssw0rd" }
      - { hostname: "192.168.243.48", vmkernel_ip: "10.154.132.12", subnet: "255.255.255.0", gateway: "10.154.132.1", username: "root", password: "P@ssw0rd" }
    #   - { name: "esxi_host_2", vmkernel_ip: "10.154.130.11", subnet: "255.255.255.0", gateway: "10.154.130.1" }
    vlan_id: "3009"
    port_group_name: "vds_48_tsdm_vlan_3009"
    dvs_name: "vds02"
    dvs_version: "7.0.3"
    cluster_name: "Cluster3"
    
  tasks:
    - name: Ensure required VMware libraries are installed
      pip:
        name:
          - pyvmomi
          - requests
  
    - name: Ensure VMware Ansible collection is installed
      ansible.builtin.command:
        cmd: ansible-galaxy collection install community.vmware
        
    # - name: Gather information about the cluster
    #   community.vmware.vmware_cluster_info:
    #     hostname: "{{ vcenter_hostname }}"
    #     username: "{{ vcenter_username }}"
    #     password: "{{ vcenter_password }}"
    #     validate_certs: no
    #     cluster_name: "{{ cluster_name }}"
    #   register: cluster_info
  
    # - name: Get host info in the cluster
    #   community.vmware.vmware_host_facts:
    #     hostname: "{{ vcenter_hostname }}"
    #     username: "{{ vcenter_username }}"
    #     password: "{{ vcenter_password }}"
    #     esxi_hostname: "{{ item.name }}"
    #     validate_certs: no
    #   loop: "{{ esxi_hosts }}"
  
    # - name: Filter hosts belonging to the specific cluster
    #   set_fact:
    #     cluster_hosts: "{{ esxi_hosts.hosts | selectattr('cluster', 'equalto', cluster_name) | map(attribute='name') | list }}"
  
    - name: Create Distributed Virtual Switch
      community.vmware.vmware_dvswitch:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        datacenter_name: "{{ datacenter_name }}"
        switch_name: "{{ dvs_name }}"
        switch_version: "{{ dvs_version }}"  # Optional: Specify version
        # uplink_port_names: ["uplink1", "uplink2"]  # Define uplinks
        uplink_quantity: 2
        state: present
      register: dvs_result
  
    # - name: Add ESXi hosts to the Distributed Virtual Switch
    #   community.vmware.vmware_dvs_host:
    #     hostname: "{{ vcenter_hostname }}"
    #     username: "{{ vcenter_username }}"
    #     password: "{{ vcenter_password }}"
    #     esxi_hostname: "{{ item.hostname }}"
    #     validate_certs: no
    #     switch_name: "{{ dvs_name }}"
    #     # vmnics:
    #     #   - vmnic1
    #     state: present
    #   with_items: "{{ esxi_hosts }}"

    - name: Create vlan portgroup
      community.vmware.vmware_dvs_portgroup:
        hostname: '{{ vcenter_hostname }}'
        username: '{{ vcenter_username }}'
        password: '{{ vcenter_password }}'
        portgroup_name: "{{ port_group_name }}"
        switch_name: "{{ dvs_name }}"
        vlan_id: "{{ vlan_id }}"
        num_ports: 4
        port_binding: static
        validate_certs: no
        state: present
      delegate_to: localhost
      # with_items: "{{ esxi_hosts }}"

    - name: Configure VMKernel ports on ESXi hosts
      community.vmware.vmware_vmkernel:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        esxi_hostname: "{{ item.hostname }}"
        dvswitch_name: "{{ dvs_name }}"
        portgroup_name: "{{ port_group_name }}"
        network:
          type: 'static'
          ip_address: "{{ item.vmkernel_ip }}"
          subnet_mask: "{{ item.subnet }}"
          default_gateway: "{{ item.gateway }}"
        state: present
        enable_mgmt: false
      loop: "{{ esxi_hosts }}"

    # - name: Add a static route using esxcli on ESXi host
    #   ansible.builtin.command: sshpass -p '{{ item.password }}' ssh -o StrictHostKeyChecking=no '{{ item.username }}@{{ item.hostname }}'
    #     'esxcli network ip route ipv4 add --gateway {{ item.gateway }} --network 10.154.132.0/24'
    #   register: esxcli_output
    #   loop: "{{ esxi_hosts }}"

    - name: List static routes using esxcli on ESXi host
      ansible.builtin.command: sshpass -p '{{ item.password }}' ssh -o StrictHostKeyChecking=no '{{ item.username }}@{{ item.hostname }}'
        'esxcli network ip route ipv4 list'
      register: esxcli_output
      loop: "{{ esxi_hosts }}"

    - name: Display route addition output
      debug:
        msg: "{{ esxcli_output }}"

    - name: List static routes using esxcli on ESXi host
      ansible.builtin.command: sshpass -p '{{ item.password }}' ssh -o StrictHostKeyChecking=no '{{ item.username }}@{{ item.hostname }}'
        'vmkping -c 5 -I vmk1 {{ item.gateway }}'
      register: vmk_output
      loop: "{{ esxi_hosts }}"
